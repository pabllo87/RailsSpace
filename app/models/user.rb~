require "digest/sha1"
class User < ActiveRecord::Base
    has_one :spec
    attr_accessor :remember_me
    attr_accessor :current_password
    
    SCREEN_NAME_MIN_LENGTH = 4
    SCREEN_NAME_MAX_LENGTH = 20
    PASSWORD_MIN_LENGTH = 4
    PASSWORD_MAX_LENGTH = 40
    EMAIL_MAX_LENGTH = 50
    SCREEN_NAME_RANGE = SCREEN_NAME_MIN_LENGTH..SCREEN_NAME_MAX_LENGTH
    PASSWORD_RANGE = PASSWORD_MIN_LENGTH..PASSWORD_MAX_LENGTH
    
    SCREEN_NAME_MAX_SIZE = 20
    PASSWORD_SIZE = 10
    EMAIL_SIZE = 30
    
    HUMANIZED_ATTRIBUTES = {
        :email => "e-Mail",
        :screen_name => "Nick",
        :password => "Password",
        :current_password => "Current password",
    }
    
    # humanize field name
    def self.human_attribute_name(attr)
        HUMANIZED_ATTRIBUTES[attr.to_sym] || super
    end
    
    validates_uniqueness_of :screen_name, :email
    validates_confirmation_of :password
    validates_length_of     :screen_name, :within => SCREEN_NAME_RANGE
    validates_length_of     :password, :within => PASSWORD_RANGE
    validates_length_of     :email, :maximum => EMAIL_MAX_LENGTH
    #validates_presence_of   :email, :message => "is not be empty"
    validates_format_of :screen_name,
                        :with => /^[A-ZąćęłńóśżźĄĆĘŁŃÓŻŹ0-9_]*$/i,
                        :message => "contains illegal characters"
    validates_format_of :email,
                        :with => /^[A-Z0-9._%-]+@([A-Z0-9-]+\.)+[A-Z]{2,4}$/i,
                        :message => "must be correct"
    
    def validate
        #errors.add(:email, "must be correct") unless email.include?("@")
        if screen_name.include?(" ")
            errors.add(:screen_name, "can not contain spaces")
        end
    end
    
    def login!(session)
      session[:user_id] = self.id
    end
    
    def remember!(cookies)
        cookies_expiration = 10.years.from_now
        cookies[:remember_me] = { :value => "1",
                                  :expires => cookies_expiration }
        self.authorization_token = unique_identifier
        self.save!
        cookies[:authorization_token] = { :value => self.authorization_token,
                                          :expires => cookies_expiration }
    end
    
    def forget!(cookies)
        cookies.delete(:remember_me)
        cookies.delete(:authorization_token)
    end
    
    def remember_me?
        self.remember_me == "1"
    end
    
    def self.logout!(session, cookies)
      session[:user_id] = nil
      cookies.delete(:authorization_token)
    end
    
    def clear_password!
      self.password = nil
      self.password_confirmation = nil
      self.current_password = nil
    end
    
    def current_password?(params)
        current_password = params[:user][:current_password]
        self.password == current_password
    end
    
    def password_errors(params)
        self.password = params[:user][:password]
        self.password_confirmation = params[:user][:password_confirmation]
        self.valid?
        errors.add(:current_password)
    end
    
    private
    
    def unique_identifier
        Digest::SHA1.hexdigest("#{self.screen_name}:#{self.password}")
    end
end
